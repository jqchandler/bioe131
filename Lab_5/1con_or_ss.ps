%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.9
%%CreationDate: Wed Sep 26 13:12:04 2018
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGGCGACCCCUGAUGGCUUGGUUGAGUAUUUACAGCUCCAUAUACAUGAGGUGUUCUCCCUACGCAAGUUCGAUCAGGCGAAACGGUGAAAGCCGUAGGUUGCCC\
) def
/coor [
[71.68758392 220.99655151]
[71.68758392 205.99655151]
[71.68758392 190.99655151]
[71.68758392 175.99655151]
[71.68758392 160.99655151]
[71.68758392 145.99655151]
[71.68758392 130.99655151]
[71.68758392 115.99655914]
[67.51979828 101.58720398]
[59.51244736 88.90325928]
[51.50509644 76.21932220]
[43.49774551 63.53538132]
[35.49039459 50.85144043]
[27.48304558 38.16750336]
[19.10334396 25.72641754]
[10.35865116 13.53911400]
[1.61395919 1.35181057]
[-7.13073301 -10.83549213]
[-15.87542534 -23.02279663]
[-24.62011719 -35.21009827]
[-33.54444504 -47.26648331]
[-42.64644623 -59.18930054]
[-61.53585052 -65.91369629]
[-63.56415176 -85.04685974]
[-73.35648346 -96.40953064]
[-83.14881897 -107.77219391]
[-96.29369354 -100.43753815]
[-110.64604950 -95.89939880]
[-125.61816406 -94.34360504]
[-140.59695435 -95.83386230]
[-154.96902466 -100.30915833]
[-168.14587402 -107.58622742]
[-179.58790588 -117.36707306]
[-188.82656860 -129.25117493]
[-195.48355103 -142.75189209]
[-199.28625488 -157.31639099]
[-200.07896423 -172.34823608]
[-197.82920837 -187.23190308]
[-192.62911987 -201.35791016]
[-184.69165039 -214.14779663]
[-174.34181213 -225.07785034]
[-162.00344849 -233.70046997]
[-148.18179321 -239.66256714]
[-133.44282532 -242.72000122]
[-118.39011383 -242.74755859]
[-103.64005280 -239.74414062]
[-89.79664612 -233.83271790]
[-77.42677307 -225.25535583]
[-67.03696442 -214.36331177]
[-59.05269241 -201.60256958]
[-53.80089951 -187.49571228]
[-51.49663925 -172.62039185]
[-52.23427582 -157.58573914]
[-55.98360062 -143.00741577]
[-62.59108353 -129.48239136]
[-71.78614807 -117.56452942]
[-61.99381638 -106.20185852]
[-52.20148468 -94.83918762]
[-41.78755951 -94.97768402]
[-32.87881851 -89.16661835]
[-28.63485146 -79.17230988]
[-30.72363091 -68.29129791]
[-21.62162781 -56.36848450]
[-14.95421791 -52.90621948]
[-12.43281460 -43.95479202]
[-3.68812203 -31.76748848]
[5.05657005 -19.58018494]
[13.80126190 -7.39288139]
[22.54595375 4.79442167]
[31.29064751 16.98172569]
[35.92735291 18.63845825]
[39.50019455 23.31834221]
[40.16698456 30.16015244]
[48.17433548 42.84409332]
[56.18168640 55.52803040]
[64.18903351 68.21197510]
[72.19638824 80.89591217]
[80.20373535 93.57984924]
[87.62995148 84.16282654]
[98.66378784 80.66617584]
[109.35621643 83.85020447]
[116.14912415 92.16689301]
[117.05828857 102.44699860]
[129.49937439 110.82670593]
[141.94046021 119.20640564]
[154.38154602 127.58610535]
[166.82263184 135.96580505]
[183.21105957 136.55857849]
[190.65180969 151.17251587]
[181.49047852 164.77406311]
[165.15145874 163.37110901]
[158.44293213 148.40689087]
[146.00184631 140.02719116]
[133.56076050 131.64749146]
[121.11967468 123.26779175]
[108.67858887 114.88808441]
[98.42008972 118.95637512]
[86.68758392 115.99655914]
[86.68758392 130.99655151]
[86.68758392 145.99655151]
[86.68758392 160.99655151]
[86.68758392 175.99655151]
[86.68758392 190.99655151]
[86.68758392 205.99655151]
[86.68758392 220.99655151]
] def
/pairs [
[1 105]
[2 104]
[3 103]
[4 102]
[5 101]
[6 100]
[7 99]
[8 98]
[9 78]
[10 77]
[11 76]
[12 75]
[13 74]
[14 73]
[15 70]
[16 69]
[17 68]
[18 67]
[19 66]
[20 65]
[21 63]
[22 62]
[24 58]
[25 57]
[26 56]
[83 96]
[84 95]
[85 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
